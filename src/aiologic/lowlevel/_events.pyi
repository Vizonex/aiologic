#!/usr/bin/env python3

# SPDX-FileCopyrightText: 2025 Ilya Egorov <0x42005e1f@gmail.com>
# SPDX-License-Identifier: ISC

import sys

from collections.abc import Generator
from typing import Any, Final, Literal, NoReturn, Protocol, final

if sys.version_info >= (3, 11):
    from typing import Never, Self
else:
    from typing_extensions import Never, Self

class Event(Protocol):
    def __bool__(self, /) -> bool: ...
    def set(self, /) -> bool: ...
    def is_set(self, /) -> bool: ...
    def is_cancelled(self, /) -> bool: ...
    @property
    def shield(self, /) -> bool: ...
    @shield.setter
    def shield(self, /, value: bool) -> None: ...

@final
class SetEvent(Event):
    def __new__(cls, /) -> SetEvent: ...
    def __bool__(self, /) -> Literal[True]: ...
    def __await__(self, /) -> Generator[Any, Any, Literal[True]]: ...
    def wait(self, /, timeout: float | None = None) -> Literal[True]: ...
    def set(self, /) -> Literal[False]: ...
    def is_set(self, /) -> Literal[True]: ...
    def is_cancelled(self, /) -> Literal[False]: ...
    @property
    def shield(self, /) -> bool: ...
    @shield.setter
    def shield(self, /, value: Never) -> NoReturn: ...

@final
class DummyEvent(Event):
    def __new__(cls, /) -> DummyEvent: ...
    def __bool__(self, /) -> Literal[True]: ...
    def __await__(self, /) -> Generator[Any, Any, Literal[True]]: ...
    def wait(self, /, timeout: float | None = None) -> Literal[True]: ...
    def set(self, /) -> Literal[False]: ...
    def is_set(self, /) -> Literal[True]: ...
    def is_cancelled(self, /) -> Literal[False]: ...
    @property
    def shield(self, /) -> bool: ...
    @shield.setter
    def shield(self, /, value: Never) -> NoReturn: ...

@final
class CancelledEvent(Event):
    def __new__(cls, /) -> CancelledEvent: ...
    def __bool__(self, /) -> Literal[False]: ...
    def __await__(self, /) -> Generator[Any, Any, Literal[False]]: ...
    def wait(self, /, timeout: float | None = None) -> Literal[False]: ...
    def set(self, /) -> Literal[False]: ...
    def is_set(self, /) -> Literal[False]: ...
    def is_cancelled(self, /) -> Literal[True]: ...
    @property
    def shield(self, /) -> bool: ...
    @shield.setter
    def shield(self, /, value: Never) -> NoReturn: ...

SET_EVENT: Final[SetEvent]
DUMMY_EVENT: Final[DummyEvent]
CANCELLED_EVENT: Final[CancelledEvent]

class GreenEvent(Event):
    def __new__(cls, /, *, shield: bool = False) -> Self: ...
    def wait(self, /, timeout: float | None = None) -> bool: ...

class AsyncEvent(Event):
    def __new__(cls, /, *, shield: bool = False) -> Self: ...
    def __await__(self, /) -> Generator[Any, Any, bool]: ...
